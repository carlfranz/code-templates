package models

import (
	"errors"
	"fmt"

	"albosmart.module/visura/backend/commons/logger"
	"gorm.io/gorm"
)

var (
	ErrGeneric = errors.New("")
	ErrMaritalStatusFound = errors.New("")
	ErrEntityNotFound = errors.New("")
)

type MaritalStatus struct {
	ID        int    `gorm:"primaryKey";default: nextval('maritalstatus_id_seq')`
	Value     string
	DeletedAt gorm.DeletedAt
}

type MaritalStatusDAO interface {
	FindAll(db *gorm.DB) (results []*MaritalStatus, count int64, err error)
	Update(db *gorm.DB, id int64, arg *MaritalStatus) (result *MaritalStatus, err error)
	Create(db *gorm.DB, arg *MaritalStatus) (id int64, err error)
	FindOne(db *gorm.DB, id int64) (result *MaritalStatus, err error)
	Delete(db *gorm.DB, id int64) (err error)
}

func (di *MaritalStatus) FindAll(db *gorm.DB) (results []*MaritalStatus, count int64, err error) {
	table := db.Table("marital_status")

	res := table.Find(&results)
	if res.Error != nil {
		fmt.Println("Error fetching data")
		return nil, 0, ErrGeneric
	}

	return results, res.RowsAffected, nil
}

func (di *MaritalStatus) Update(db *gorm.DB, id int64, arg *MaritalStatus) (result *MaritalStatus, err error) {
	var maritalStatus MaritalStatus
	db.Table("marital_status").First(&maritalStatus, id)
	maritalStatus.Value = arg.Value
	db.Table("marital_status").Save(&maritalStatus)
	return &maritalStatus, nil
}

func (di *MaritalStatus) Create(db *gorm.DB, value *MaritalStatus) (id int64, err error) {
	var maritalStatus MaritalStatus
	logger.With("maritalStatus", value).Info("Creating maritalStatus in db")
	result := db.Table("marital_status").Model(&maritalStatus).Create(value)
	return int64(value.ID), result.Error
}

func (di *MaritalStatus) FindOne(db *gorm.DB, id int64) (result *MaritalStatus, err error) {
	logger.Info("Retrieving maritalStatus from db with id ", id)
	var maritalStatus MaritalStatus
	res := db.Unscoped().Table("marital_status").Model(&maritalStatus).First(&maritalStatus, id)
	if res.Error != nil {
		if errors.Is(res.Error, gorm.ErrRecordNotFound) {
			return nil, ErrMaritalStatusFound
		} else {
			return nil, ErrGeneric
		}
	}
	return &maritalStatus, nil
}

func (di *MaritalStatus) Delete(db *gorm.DB, id int64) (err error) {
	res := db.Table("marital_status").Delete(&MaritalStatus{}, uint(id))
	if res.Error != nil {
		if errors.Is(res.Error, gorm.ErrRecordNotFound) {
			return ErrEntityNotFound
		} else {
			return ErrGeneric
		}
	}
	return nil
}
